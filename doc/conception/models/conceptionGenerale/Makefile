include Config.mk

# Generic code

MODEL_FILE=$(MODEL_PATH)/$(MODEL).$(MODEL_EXT)

TARGET_FOLDER=build
TARGET_BASE=$(TARGET_FOLDER)/$(MODEL)

AU2PU=au2pu.js

# Query model for active objects and interaction names
ELEMENTS:=$(shell node $(AU2PU) $(MODEL_FILE) model $(TARGET_BASE) $(PARAMS) listActive=true listInteractions=true listClasses=true listEnumerations=true | sed -ne 's/ /_/g;/^ACTIVE_OBJECTS:$$/,$$p')
OBJECTS=$(shell echo "$(ELEMENTS)" | sed -e 's/ /\n/g' | sed -ne '/^ACTIVE_OBJECTS:$$/,/^END$$/p' | tail -n +2 | head -n -1)
INTERACTIONS=$(shell echo "$(ELEMENTS)" | sed -e 's/ /\n/g' | sed -ne '/^INTERACTIONS:$$/,/^END$$/p' | tail -n +2 | head -n -1)
CLASSES=$(shell echo "$(ELEMENTS)" | sed -e 's/ /\n/g' | sed -ne '/^CLASSES:$$/,/^END$$/p' | tail -n +2 | head -n -1)
ENUMERATIONS=$(shell echo "$(ELEMENTS)" | sed -e 's/ /\n/g' | sed -ne '/^ENUMERATIONS:$$/,/^END$$/p' | tail -n +2 | head -n -1)

# List of diagrams automatically generated by au2pu.js that we will use
AUTO_PUML=$(TARGET_BASE)-context.pdf $(TARGET_BASE)-classes.pdf $(TARGET_BASE)-datatypes.pdf $(addprefix $(TARGET_BASE)-,$(OBJECTS:=-SM.pdf))
AUTO_PUML+=$(addprefix $(TARGET_BASE)-class-,$(CLASSES:=.pdf))
AUTO_PUML+=$(addsuffix -SM.pdf,$(addprefix $(TARGET_BASE)-,$(shell echo $(FOLDED_STATES) | sed -re "s/,/ /g;s/(^| )([^.]+)\./ \2-\2./g")))
AUTO_PUML+=$(addprefix $(TARGET_BASE)-activity-,$(ACTIVITIES:=.pdf))
AUTO_SVG=$(addprefix $(TARGET_BASE)-sequence-,$(INTERACTIONS:=.pdf))

# List of diagrams automatically generated by au2pu.js that we will not use
UNUSED_PUML=$(TARGET_BASE).pdf $(TARGET_BASE)-class.pdf $(addprefix $(TARGET_BASE)-,$(OBJECTS:=.pdf))

# Special symbol definitions for later use
SPACE=$(subst ,, )
COMMA=,

# List of alldiagrams to process
DIAGRAMS=$(AUTO_PUML) $(MANU_PUML) $(AUTO_SVG)

LATEX_GEN=./generateLaTeX.sh


all: model.tex

clean:
	rm -f $(AUTO_PUML) $(AUTO_PUML:.pdf=.svg) $(AUTO_PUML:.pdf=.puml)
	rm -f $(UNUSED_PUML) $(UNUSED_PUML:.pdf=.svg) $(UNUSED_PUML:.pdf=.puml)
	rm -f $(patsubst %,"%",$(AUTO_SVG)) $(patsubst %,"%",$(AUTO_SVG:.pdf=.svg))
	# not removing source PlantUML files for "manual" diagrams	
	rm -f $(MANU_PUML) $(MANU_PUML:.pdf=.svg)
	rm -f $(TARGET_BASE)-macros.tex
	rm -f example.tex example.pdf example.aux example.fdb_latexmk example.fls example.log example.out

%-crop.pdf: %.pdf
	pdfcrop "$<"

$(TARGET_BASE)-macros.tex $(AUTO_SVG:.pdf=.svg) $(AUTO_PUML:.pdf=.puml) $(UNUSED_PUML:.pdf=.puml) &: $(MODEL_FILE) $(MODEL_FILE).doc.yml Config.mk
	mkdir -p build
	node $(AU2PU) $< model $(TARGET_BASE) foldedStateFQNs=$(subst $(SPACE),$(COMMA),$(FOLDED_STATES)) narrow=true rawPlantUML=true genActivitiesFor=$(subst $(SPACE),$(COMMA),$(ACTIVITIES)) $(PARAMS)

%-cleaned.svg: %.svg
	# otherwise rsvg will show PlantUML's hidden edges
	sed -re 's/(<path [^>]*)style="stroke:#00000000;[^"]*"/\1/p' "$<" > "$@"

%.pdf: %-cleaned.svg
	rsvg-convert -f pdf "$<" > "$@"

$(AUTO_PUML:.pdf=.svg) $(MANU_PUML:.pdf=.svg) &: $(AUTO_PUML:.pdf=.puml) $(MANU_PUML:.pdf=.puml)
	plantuml -checkmetadata -nbthread auto -tsvg $?
	# making sure we do not check metadata again until next change
	touch $?

model.tex: $(DIAGRAMS) $(MODEL_FILE) $(LATEX_GEN) $(TARGET_BASE)-macros.tex
	$(LATEX_GEN) $(MODEL) "$(OBJECTS)" "$(INTERACTIONS)" "$(CLASSES)" "$(ENUMERATIONS)" "$(ACTIVITIES)"

%.pdf: %.tex $(DIAGRAMS)
	latexmk -lualatex "$<"

# keeping .svg files so that PlantUML can check their metadata, which avoids regenerating them when there is no actual change.
.SECONDARY: %.svg
.PRECIOUS: %-cleaned.svg

.PRECIOUS: $(MODEL_FILE).doc.yml

.PHONY: all clean
